// <auto-generated />
using System;
using Ipr.WaterSensor.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ipr.WaterSensor.Infrastructure.Migrations
{
    [DbContext(typeof(WaterSensorDbContext))]
    partial class WaterSensorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.FireBeetle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BatteryPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTimeMeasured")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FireBeetleDevice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7379d81-1f29-494e-81e2-0a313541dd5e"),
                            BatteryPercentage = 67.0,
                            DateTimeMeasured = new DateTime(2023, 8, 12, 21, 35, 28, 42, DateTimeKind.Local).AddTicks(2671)
                        });
                });

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.TankStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<double>("TotalWaterConsumed")
                        .HasColumnType("float");

                    b.Property<Guid>("WaterTankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WaterTankId");

                    b.ToTable("TankStatistics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8509b424-318c-4936-a971-ff6617f17abd"),
                            Month = 7,
                            TotalWaterConsumed = 200.0,
                            WaterTankId = new Guid("2bf39e4b-0caa-4cda-8e28-883b88fce222"),
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("0194cdcd-9d5f-468a-a32f-cddeb96e19dc"),
                            Month = 6,
                            TotalWaterConsumed = 300.0,
                            WaterTankId = new Guid("2bf39e4b-0caa-4cda-8e28-883b88fce222"),
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("f10dc9d0-ae7f-433d-aa40-7bdd309e6e6b"),
                            Month = 5,
                            TotalWaterConsumed = 500.0,
                            WaterTankId = new Guid("2bf39e4b-0caa-4cda-8e28-883b88fce222"),
                            Year = 2023
                        });
                });

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.WaterLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeMeasured")
                        .HasColumnType("datetime2");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<Guid>("WaterTankId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WaterTankId");

                    b.ToTable("WaterLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c7d20cb-f950-41a1-8f1b-4e4259727d96"),
                            DateTimeMeasured = new DateTime(2023, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percentage = 58.0,
                            WaterTankId = new Guid("2bf39e4b-0caa-4cda-8e28-883b88fce222")
                        },
                        new
                        {
                            Id = new Guid("7312af38-de1c-4f14-b621-7d95d7b94af1"),
                            DateTimeMeasured = new DateTime(2023, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percentage = 60.0,
                            WaterTankId = new Guid("2bf39e4b-0caa-4cda-8e28-883b88fce222")
                        },
                        new
                        {
                            Id = new Guid("b8704ae8-3dbf-4e96-b949-86900cd868b8"),
                            DateTimeMeasured = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percentage = 47.0,
                            WaterTankId = new Guid("2bf39e4b-0caa-4cda-8e28-883b88fce222")
                        },
                        new
                        {
                            Id = new Guid("3abafa70-015b-4946-94fb-887df2c4d268"),
                            DateTimeMeasured = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percentage = 50.0,
                            WaterTankId = new Guid("2bf39e4b-0caa-4cda-8e28-883b88fce222")
                        },
                        new
                        {
                            Id = new Guid("63985122-d59c-47d3-b509-ebbcbd9bf63c"),
                            DateTimeMeasured = new DateTime(2023, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percentage = 55.0,
                            WaterTankId = new Guid("2bf39e4b-0caa-4cda-8e28-883b88fce222")
                        },
                        new
                        {
                            Id = new Guid("02b4c860-78af-491b-9e8c-ca1152485dbd"),
                            DateTimeMeasured = new DateTime(2023, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percentage = 60.0,
                            WaterTankId = new Guid("2bf39e4b-0caa-4cda-8e28-883b88fce222")
                        });
                });

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.WaterTank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Radius")
                        .HasColumnType("int");

                    b.Property<double>("UpdateIntervalMicroSeconds")
                        .HasColumnType("float");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WaterTanks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bf39e4b-0caa-4cda-8e28-883b88fce222"),
                            Height = 180,
                            Name = "Main water tank",
                            Radius = 133,
                            UpdateIntervalMicroSeconds = 1800000000.0,
                            Volume = 10
                        });
                });

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.TankStatistics", b =>
                {
                    b.HasOne("Ipr.WaterSensor.Core.Entities.WaterTank", "WaterTank")
                        .WithMany("TankStatistics")
                        .HasForeignKey("WaterTankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WaterTank");
                });

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.WaterLevel", b =>
                {
                    b.HasOne("Ipr.WaterSensor.Core.Entities.WaterTank", "WaterTank")
                        .WithMany("WaterLevels")
                        .HasForeignKey("WaterTankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WaterTank");
                });

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.WaterTank", b =>
                {
                    b.Navigation("TankStatistics");

                    b.Navigation("WaterLevels");
                });
#pragma warning restore 612, 618
        }
    }
}

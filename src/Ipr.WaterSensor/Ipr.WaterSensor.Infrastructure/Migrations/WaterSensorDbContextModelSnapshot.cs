// <auto-generated />
using System;
using Ipr.WaterSensor.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ipr.WaterSensor.Infrastructure.Migrations
{
    [DbContext(typeof(WaterSensorDbContext))]
    partial class WaterSensorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.FireBeetle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BatteryPercentage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeMeasured")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FireBeetleDevice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7379d81-1f29-494e-81e2-0a313541dd5e"),
                            BatteryPercentage = "67",
                            DateTimeMeasured = new DateTime(2023, 8, 8, 15, 40, 6, 357, DateTimeKind.Local).AddTicks(5465)
                        });
                });

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.TankStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalWaterCollected")
                        .HasColumnType("int");

                    b.Property<int>("TotalWaterDispensed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TankStatistics");
                });

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.WaterLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeMeasured")
                        .HasColumnType("datetime2");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WaterLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74169af9-72b7-4313-971a-c96307b84fc9"),
                            DateTimeMeasured = new DateTime(2023, 8, 8, 15, 40, 6, 357, DateTimeKind.Local).AddTicks(5424),
                            Percentage = 90
                        });
                });

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.WaterTank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CubicMeters")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Liters")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StatisticsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WaterLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatisticsId");

                    b.HasIndex("WaterLevelId");

                    b.ToTable("WaterTanks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bf39e4b-0caa-4cda-8e28-883b88fce222"),
                            CubicMeters = 8,
                            Height = 4,
                            Liters = 10000,
                            Name = "Main water tank",
                            WaterLevelId = new Guid("74169af9-72b7-4313-971a-c96307b84fc9"),
                            Width = 2
                        });
                });

            modelBuilder.Entity("Ipr.WaterSensor.Core.Entities.WaterTank", b =>
                {
                    b.HasOne("Ipr.WaterSensor.Core.Entities.TankStatistics", "Statistics")
                        .WithMany()
                        .HasForeignKey("StatisticsId");

                    b.HasOne("Ipr.WaterSensor.Core.Entities.WaterLevel", "CurrentWaterLevel")
                        .WithMany()
                        .HasForeignKey("WaterLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentWaterLevel");

                    b.Navigation("Statistics");
                });
#pragma warning restore 612, 618
        }
    }
}
